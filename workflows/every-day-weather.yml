name: Send a telegram message abount today's weather every morning

on:
  weather:
    apiKey: ${{ secrets.OPENWEATHERMAP_API_KEY }}
    params:
      lat: 59.8944
      lon: 30.2642
      units: metric
    every: 0
    timeZone: UTC+3

jobs:
  notify:
    name: Send notifications
    runs-on: ubuntu-latest
    steps:
      - name: View context attributes
        uses: actions/github-script@v4
        with:
          script: |
            console.log(context)

      - name: Prepare a telegram message
        uses: actions/github-script@v4
        id: message
        env:
          W: ${{ toJSON(on.weather.outputs) }}
          WEATHER_DATA: ${{ toJSON(on.weather.outputs) }}
          LONGITUDE: ${{ on.weather.outputs.lon }}
          LATITUDE: ${{ on.weather.outputs.lat }}
          TIMEZONE: ${{ on.weather.outputs.timezone }}
          CURRENT_TEMP: ${{ on.weather.outputs.current.temp }}
          CURRENT_FEELS_LIKE: ${{ on.weather.outputs.current.feels_like }}
          CURRENT_PRESSURE: ${{ on.weather.outputs.current.pressure }}
          CURRENT_HUMIDITY: ${{ on.weather.outputs.current.humidity }}
          CURRENT_UVI: ${{ on.weather.outputs.current.uvi }}
          CURRENT_VISIBILITY: ${{ on.weather.outputs.current.visibility }}
          CURRENT_CLOUDS: ${{ on.weather.outputs.current.clouds }}
          CURRENT_SUNRISE: ${{ on.weather.outputs.current.sunrise }}
          CURRENT_SUNSET: ${{ on.weather.outputs.current.sunset }}
          CURRENT_WIND_SPEED: ${{ on.weather.outputs.current.wind_speed }}
          CURRENT_WIND_DEG: ${{ on.weather.outputs.current.wind_deg }}
          WEATHER_MAIN: ${{ on.weather.outputs.current.weather[0].main }}
          WEATHER_DESCRIPTION: ${{ on.weather.outputs.current.weather[0].description }}
          DAILY_TEMP_MIN: ${{ on.weather.outputs.daily[0].temp.min }}
          DAILY_TEMP_MAX: ${{ on.weather.outputs.daily[0].temp.max }}
        with:
          script: |
            /**
             * Process env variables
             * @type {string[]}
             */
            const { WEATHER_DATA, LONGITUDE, LATITUDE, TIMEZONE, CURRENT_TEMP, CURRENT_FEELS_LIKE, CURRENT_PRESSURE, CURRENT_HUMIDITY, CURRENT_UVI, CURRENT_VISIBILITY, CURRENT_CLOUDS, CURRENT_WIND_SPEED, CURRENT_WIND_DEG, CURRENT_SUNRISE, CURRENT_SUNSET, WEATHER_MAIN, WEATHER_DESCRIPTION, DAILY_TEMP_MIN, DAILY_TEMP_MAX } = process.env

            /**
             * Side directions
             * @type {string[]}
             */
            const DIRECTIONS = ['north', 'north-west', 'west', 'south-west', 'south', 'south-east', 'east', 'north-east'];

            /**
             * Locale
             * @type {string}
             */
            const LOCALE = 'en-GB';

            /**
             * Date format
             * @type {{hour: string, timeZone: string, minute: string}}
             */
            const DATE_FORMAT = {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Europe/Moscow',
            };

            /**
            * Returns formatted side direction by input angle in degrees
            * @param angle initial input angle in degrees to calculate by
            * @returns {string} formatted side direction
            */
            const formatSideDirection = value => {
                return DIRECTIONS[Math.round(((value %= 360) < 0 ? value + 360 : value) / 45) % 8];
            };

            /**
            * Returns formatted date by input date/time pattern
            * @param value initial input date to format
            * @returns {string} short formatted date
            */
            const formatDateByPattern = value => {
              return new Date(value * 1000).toLocaleString(LOCALE, DATE_FORMAT);
            };

            console.log(JSON.stringify(WEATHER_DATA));
            console.log(process.env.W.lon);
            console.log(JSON.parse(process.env.W).lon);

            const wind = Math.round(CURRENT_WIND_SPEED);
            const windDirection = formatSideDirection(CURRENT_WIND_DEG);

            const sunrise = formatDateByPattern(CURRENT_SUNRISE);
            const sunset = formatDateByPattern(CURRENT_SUNSET);

            let result = '';
            result += '---\n';
            result += `Currently, the weather in <Saint-Petersburg> is:\n\n`;
            result += `location: [lon: ${LONGITUDE}, lat: ${LATITUDE}, timezone: ${TIMEZONE}],\n`;
            result += `temperature: ${CURRENT_TEMP}°C [${DAILY_TEMP_MIN}-${DAILY_TEMP_MAX}°C] (${WEATHER_MAIN}, ${WEATHER_DESCRIPTION}), fells like ${CURRENT_FEELS_LIKE}°C,\n`;
            result += `humidity: ${CURRENT_HUMIDITY}%,\n`;
            result += `pressure: ${CURRENT_PRESSURE} (mbar),\n`;
            result += `visibility: ${CURRENT_VISIBILITY} metres,\n`;
            result += `UV index: ${CURRENT_UVI},\n`;
            result += `wind: /${windDirection}/ ${wind} (m/s),\n`;
            result += `cloudy: ${CURRENT_CLOUDS}%,\n\n`;
            result += `today, the Sun rises at ${sunrise} am and sets at ${sunset} pm.`;
            result += '---\n';

            return result;
          result-encoding: string

      - name: Send a telegram message
        uses: appleboy/telegram-action@v0.1.0
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ steps.message.outputs.result }}
